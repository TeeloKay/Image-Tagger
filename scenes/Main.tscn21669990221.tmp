[gd_scene load_steps=22 format=3 uid="uid://fie0ld0my05u"]

[ext_resource type="Script" uid="uid://b4t3o4eogrh3n" path="res://scripts/controllers/tool_controller.gd" id="1_3p2gp"]
[ext_resource type="PackedScene" uid="uid://cd7adillri8dg" path="res://scenes/views/directory_view.tscn" id="3_q8u5g"]
[ext_resource type="PackedScene" uid="uid://bhs8lug25xk6b" path="res://scenes/views/search_panel.tscn" id="4_jlsqs"]
[ext_resource type="Script" uid="uid://beviaeeurwjjn" path="res://scripts/controllers/tagging_view_controller.gd" id="4_wp0k4"]
[ext_resource type="Script" uid="uid://b37wppbdqh0qm" path="res://scripts/controllers/tag_editor_controller.gd" id="5_bjd11"]
[ext_resource type="PackedScene" uid="uid://c74n6v23cjt7m" path="res://scenes/views/file_browser_view.tscn" id="5_jlsqs"]
[ext_resource type="Script" uid="uid://w51jykngua7n" path="res://scenes/project_toolbar.gd" id="5_wp0k4"]
[ext_resource type="Script" uid="uid://dg8k4wool6u77" path="res://scenes/help_menu.gd" id="6_bjd11"]
[ext_resource type="Script" uid="uid://8bv6r2etb1ah" path="res://scripts/controllers/bulk_tagging_controller.gd" id="7_nfivy"]
[ext_resource type="PackedScene" uid="uid://bajibmipjnmdt" path="res://scenes/views/tag_editor.tscn" id="7_q8u5g"]
[ext_resource type="Script" uid="uid://bjvppx536xcr3" path="res://scripts/controllers/search_controller.gd" id="8_jlsqs"]
[ext_resource type="PackedScene" uid="uid://dl8q7fsbr8sr2" path="res://scenes/views/tagging_view.tscn" id="8_q8u5g"]
[ext_resource type="Script" uid="uid://btsew8tf20wa5" path="res://scripts/controllers/app_controller.gd" id="13_1nqs0"]
[ext_resource type="PackedScene" uid="uid://cykwccqg380hc" path="res://scenes/views/bulk_tagging_view.tscn" id="13_bb450"]
[ext_resource type="PackedScene" uid="uid://xjnyl66p6obf" path="res://scenes/common/popups/color_picker_popup.tscn" id="14_3p2gp"]
[ext_resource type="PackedScene" uid="uid://bobv8ipx77jmy" path="res://scenes/common/popups/confirm_dialog.tscn" id="14_mwfav"]
[ext_resource type="Script" uid="uid://cbqh682fdjv3l" path="res://scripts/controllers/directory_browser_controller.gd" id="16_1nqs0"]
[ext_resource type="PackedScene" uid="uid://cm5d0yt6l5llv" path="res://scenes/common/popups/conversion_popup.tscn" id="16_cvmbd"]
[ext_resource type="PackedScene" uid="uid://cd3q4s152o3wt" path="res://scenes/common/popups/create_folder_dialog.tscn" id="17_ft6cd"]
[ext_resource type="Script" uid="uid://qn1hye8vtl5x" path="res://scripts/tools/tagging/tagging_queue.gd" id="24_2ofn6"]

[sub_resource type="GDScript" id="GDScript_1nqs0"]
script/source = "class_name FileBrowserController extends MenuController

@onready var _confirm_prefab := preload(\"res://scenes/common/popups/confirm_dialog.tscn\")

## Currently open directory.
@export_global_dir var directory: String = \"\":
	set = set_directory

@export var image_view: FileBrowserView
@export var sort_mode: FileDataHandler.SortMode:
	set = set_sort_mode, get = get_sort_mode

@export var extension_filter: PackedStringArray = []:
	set = set_extension_filter


var _active_dialog: ConfirmationDialog
## list of currently selected files.
var _selected_files: PackedStringArray = []
var _viewed_files: Dictionary[String, bool] = {}

var _file_loader: FileLoader
var _data_handler: FileDataHandler

var _is_loading := false
var _selection_update_pending := false

signal image_selected(image_path: String)
signal selection_changed
signal directory_set(path: String)

func _ready() -> void:
	super._ready()

	_file_loader = FileLoader.new()
	add_child(_file_loader, INTERNAL_MODE_BACK)
	_data_handler = FileDataHandler.new()
	add_child(_data_handler, INTERNAL_MODE_BACK)

	image_view.item_selected.connect(_on_item_selected)
	image_view.selection_updated.connect(_on_selection_updated)

	image_view.update_request.connect(update_view)
	image_view.sort_mode_changed.connect(set_sort_mode)
	image_view.filter_item_pressed.connect(_on_filter_item_pressed)

	_file_loader.file_loaded.connect(_register_file_data)
	_file_loader.queue_complete.connect(_on_file_loader_queue_completed)

	image_view.file_moved.connect(_on_file_move_request)
	image_view.file_remove_request.connect(_on_file_remove_request)
	image_view.file_rename_request.connect(_on_file_rename_request)

	FileService.file_removed.connect(_on_file_removed)
	FileService.file_created.connect(_on_file_created)

	selection_changed.connect(image_view.update_selection_count)

	ProjectManager.search_engine.search_completed.connect(show_search_results)
	ThumbnailManager.thumbnail_ready.connect(image_view._on_thumbnail_ready)

#region core view functions

func show_files_in_directory(dir_path: String) -> void:
	clear()

	_data_handler.assign_files(get_files_in_directory(dir_path))
	_file_loader.populate_queue(_data_handler.get_files_filtered(extension_filter))
	_is_loading = true

func show_search_results(results: Array[SearchResult]) -> void:
	clear()

	if results.is_empty():
		return
	for result in results:
		if result.image_path == \"\":
			_data_handler.add_file(result.image_path)
			
			# This method is put here to allow for live updating of the view.
			# when all files are loaded, the view will be reset and files
			# will be added in the right order with the right tooltips
			_add_item_to_view(result.image_path)
	_file_loader.populate_queue(_data_handler.get_files_filtered(extension_filter))
	_is_loading = true

func get_files_in_directory(dir_path: String) -> PackedStringArray:
	var dir = DirAccess.open(dir_path)
	var files: PackedStringArray = []
	if !dir:
		return files
	dir.list_dir_begin()
	var file_name := dir.get_next()
	while file_name != \"\":
		if !dir.current_is_dir() && ImageUtil.is_valid_image(file_name):
			var path := dir_path.path_join(file_name)
			files.append(path)

			# This method is put here to allow for live updating of the view.
			# when all files are loaded, the view will be reset and files
			# will be added in the right order with the right tooltips.
			_add_item_to_view(path)
		file_name = dir.get_next()
	dir.list_dir_end()

	return files

## Rebuild view from list of cached files. 
func rebuild_view_from_file_list() -> void:
	if _is_loading:
		return
	clear_view()

	_data_handler.sort_files()
	for file in _data_handler.get_files_filtered(extension_filter):
		_add_item_to_view(file, _data_handler.get_file_data(file))

## Update internal list of files and rebuild view.
func update_view() -> void:
	if directory:
		show_files_in_directory(directory)

func _register_file_data(file: String, file_data: FileData) -> void:
	_data_handler.register_file(file, file_data)

	if !_viewed_files.has(file) && file.get_extension() in extension_filter:
		_viewed_files[file] = true
		_add_item_to_view(file, file_data)

func _add_item_to_view(file: String, file_data: FileData = null) -> int:
	var index: int = image_view.add_item_to_list(file, file_data)
	ThumbnailManager.queue_thumbnail(file)
	return index

func _on_project_reset() -> void:
	clear_selection()
	clear_view()
	_file_loader.clear_queue()
	_file_loader.clear_cache()
	_data_handler.clear()
	_viewed_files.clear()

func clear() -> void:
	clear_selection()
	clear_view()
	_file_loader.clear_queue()
	_data_handler.clear()
	_viewed_files.clear()

func clear_view() -> void:
	_viewed_files.clear()
	image_view.clear()
	ThumbnailManager.clear_queue()
#endregion

#region File events
func _on_file_move_request(from: String, to: String) -> void:
	FileService.move_file(from, to)
	rebuild_view_from_file_list()

func _on_file_removed(_path: String) -> void:
	_data_handler.remove_file(_path)
	rebuild_view_from_file_list()

func _on_file_created(_path: String) -> void:
	if _path.get_base_dir() != directory:
		return
	_file_loader.add_file_to_queue(_path)
	rebuild_view_from_file_list()
#endregion

#region selection
func _on_item_selected(index: int) -> void:
	print(\"item selected\")
	if index >= 0 && index < _data_handler.get_file_count():
		_selected_files.clear()
		_selected_files.append(_data_handler.get_files_filtered(extension_filter)[index])
		if !_selected_files.is_empty():
			image_selected.emit(_selected_files[0])
		else:
			image_selected.emit(\"\")
		selection_changed.emit()

func _on_selection_updated() -> void:
	if _selection_update_pending:
		return
	_selection_update_pending = true
	call_deferred(\"_apply_selection_update\")
	
func _apply_selection_update() -> void:
	_selection_update_pending = false
	_selected_files.clear()
	var selected_items := image_view.get_selected_items()
	var items := _data_handler.get_files_filtered(extension_filter)
	for idx in selected_items:
		_selected_files.append(items[idx])
		# TODO: we added this for a temporary test of the file hasher's multithreading functionality
		# TODO: remove when no longer needed.
		ProjectManager.image_hasher.add_file_to_queue(items[idx])
	if !_selected_files.is_empty():
		image_selected.emit(_selected_files[0])
	selection_changed.emit()

func clear_selection() -> void:
	_selected_files.clear()
	image_selected.emit(\"\")
	selection_changed.emit()
#endregion

#region file operations
func _on_file_remove_request() -> void:
	if _selected_files.size() > 0:
		_active_dialog = _confirm_prefab.instantiate() as ConfirmationDialog
		add_child(_active_dialog)
		_active_dialog.title = \"Delete file(s)\"
		_active_dialog.dialog_text = \"Are you certain you want to delete all %d files? This cannot be undone.\" % _selected_files.size()
		_active_dialog.confirmed.connect(_on_file_remove_confirmation)
		_active_dialog.get_cancel_button().pressed.connect(_on_request_cancelled)
		_active_dialog.popup_centered()

func _on_file_remove_confirmation() -> void:
	for file in _selected_files:
		var img_hash = _project_data.get_hash_for_path(file)
		_project_data.image_db.remove_image(img_hash)
		FileService.remove_file(file)
	rebuild_view_from_file_list()
	image_selected.emit(\"\")

func _on_file_rename_request() -> void:
	if _selected_files.size() > 0:
		print(\"requesting file renaming\")

func get_selection() -> PackedStringArray:
	return _selected_files

func _on_request_cancelled() -> void:
	if _active_dialog:
		_active_dialog.queue_free()

func _on_file_loader_queue_completed() -> void:
	_is_loading = false
	rebuild_view_from_file_list()
#endregion

#region Getters & Setters

func set_directory(dir_path: String) -> void:
	if directory == dir_path:
		return
	directory = dir_path

	show_files_in_directory(directory)
	image_view.set_scroll_position(Vector2i.ZERO)
	directory_set.emit(directory)

func set_sort_mode(mode: FileDataHandler.SortMode) -> void:
	_data_handler.sort_mode = mode
	## cannot sort while loading files
	if _file_loader.is_working():
		return
	_data_handler.sort_files()
	rebuild_view_from_file_list()

func get_sort_mode() -> FileDataHandler.SortMode:
	if _data_handler:
		return _data_handler.sort_mode
	return FileDataHandler.SortMode.SORT_BY_NAME_ASC

func set_extension_filter(filter: PackedStringArray) -> void:
	extension_filter = filter

#endregion

#region UI callbacks
func _on_filter_item_pressed(id: int) -> void:
	var valid_types := ImageUtil.ACCEPTED_TYPES
	var selected_type = valid_types[id]
	var index := extension_filter.find(selected_type)
	if index == -1:
		extension_filter.append(selected_type)
	else:
		extension_filter.remove_at(index)
	rebuild_view_from_file_list()

#endregion
"

[node name="Main" type="CanvasLayer"]

[node name="Root" type="Control" parent="."]
layout_mode = 3
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2

[node name="Background" type="Panel" parent="Root"]
layout_mode = 1
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
theme_type_variation = &"DarkPanel"

[node name="VBoxContainer" type="VBoxContainer" parent="Root"]
layout_mode = 1
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
theme_override_constants/separation = 0

[node name="Header" type="PanelContainer" parent="Root/VBoxContainer"]
layout_mode = 2

[node name="MarginContainer" type="MarginContainer" parent="Root/VBoxContainer/Header"]
layout_mode = 2

[node name="Toolbar" type="HBoxContainer" parent="Root/VBoxContainer/Header/MarginContainer"]
layout_mode = 2
theme_override_constants/separation = 6
script = ExtResource("5_wp0k4")

[node name="FileMenuButton" type="MenuButton" parent="Root/VBoxContainer/Header/MarginContainer/Toolbar"]
layout_mode = 2
text = "File"
switch_on_hover = true

[node name="FileDialog" type="FileDialog" parent="Root/VBoxContainer/Header/MarginContainer/Toolbar/FileMenuButton"]
unique_name_in_owner = true
auto_translate_mode = 1
title = "Open a Directory"
initial_position = 2
ok_button_text = "Select Current Folder"
file_mode = 2
access = 2
use_native_dialog = true

[node name="VSeparator" type="VSeparator" parent="Root/VBoxContainer/Header/MarginContainer/Toolbar"]
layout_mode = 2

[node name="ProjectMenuButton" type="MenuButton" parent="Root/VBoxContainer/Header/MarginContainer/Toolbar"]
layout_mode = 2
disabled = true
text = "Project"

[node name="SettingsMenuButton" type="MenuButton" parent="Root/VBoxContainer/Header/MarginContainer/Toolbar"]
layout_mode = 2
disabled = true
text = "Settings"
item_count = 1
popup/item_0/text = "Save thumbnails"
popup/item_0/checkable = 1
popup/item_0/id = 0

[node name="ToolsMenuButton" type="MenuButton" parent="Root/VBoxContainer/Header/MarginContainer/Toolbar"]
layout_mode = 2
text = "Tools"
item_count = 1
popup/item_0/text = "Convert selection to PNG"
popup/item_0/id = 0

[node name="VSeparator2" type="VSeparator" parent="Root/VBoxContainer/Header/MarginContainer/Toolbar"]
layout_mode = 2

[node name="HelpMenuButton" type="MenuButton" parent="Root/VBoxContainer/Header/MarginContainer/Toolbar"]
layout_mode = 2
disabled = true
text = "Help
"
script = ExtResource("6_bjd11")

[node name="Body" type="MarginContainer" parent="Root/VBoxContainer"]
layout_mode = 2
size_flags_vertical = 3

[node name="HSplitContainer" type="HSplitContainer" parent="Root/VBoxContainer/Body"]
layout_mode = 2
size_flags_horizontal = 3

[node name="LeftMenu" type="TabContainer" parent="Root/VBoxContainer/Body/HSplitContainer"]
layout_mode = 2
current_tab = 0

[node name="Folders" type="MarginContainer" parent="Root/VBoxContainer/Body/HSplitContainer/LeftMenu"]
custom_minimum_size = Vector2(256, 0)
layout_mode = 2
metadata/_tab_index = 0

[node name="VBoxContainer" type="VBoxContainer" parent="Root/VBoxContainer/Body/HSplitContainer/LeftMenu/Folders"]
layout_mode = 2

[node name="DirectoryView" parent="Root/VBoxContainer/Body/HSplitContainer/LeftMenu/Folders/VBoxContainer" instance=ExtResource("3_q8u5g")]
layout_mode = 2
size_flags_vertical = 3

[node name="SearchPanel" parent="Root/VBoxContainer/Body/HSplitContainer/LeftMenu/Folders/VBoxContainer" instance=ExtResource("4_jlsqs")]
custom_minimum_size = Vector2(256, 256)
layout_mode = 2

[node name="Images" type="HSplitContainer" parent="Root/VBoxContainer/Body/HSplitContainer"]
layout_mode = 2
split_offset = -360

[node name="CenterMenu" type="TabContainer" parent="Root/VBoxContainer/Body/HSplitContainer/Images"]
layout_mode = 2
size_flags_horizontal = 3
current_tab = 0

[node name="Images" type="MarginContainer" parent="Root/VBoxContainer/Body/HSplitContainer/Images/CenterMenu"]
layout_mode = 2
metadata/_tab_index = 0

[node name="HSplitContainer" type="HSplitContainer" parent="Root/VBoxContainer/Body/HSplitContainer/Images/CenterMenu/Images"]
layout_mode = 2
split_offset = 800

[node name="FileBrowser" parent="Root/VBoxContainer/Body/HSplitContainer/Images/CenterMenu/Images/HSplitContainer" node_paths=PackedStringArray("_controller") instance=ExtResource("5_jlsqs")]
layout_mode = 2
_controller = NodePath("../../../../../../../../../AppController/FileBrowserController")

[node name="VBoxContainer2" type="VBoxContainer" parent="Root/VBoxContainer/Body/HSplitContainer/Images/CenterMenu/Images/HSplitContainer"]
layout_mode = 2

[node name="Selection" parent="Root/VBoxContainer/Body/HSplitContainer/Images/CenterMenu/Images/HSplitContainer/VBoxContainer2" node_paths=PackedStringArray("controller") instance=ExtResource("13_bb450")]
visible = false
layout_mode = 2
size_flags_vertical = 3
controller = NodePath("../../../../../../../../../../AppController/BulkTaggingController")

[node name="Single" parent="Root/VBoxContainer/Body/HSplitContainer/Images/CenterMenu/Images/HSplitContainer/VBoxContainer2" instance=ExtResource("8_q8u5g")]
layout_mode = 2
state = 2

[node name="Tags" type="MarginContainer" parent="Root/VBoxContainer/Body/HSplitContainer/Images/CenterMenu"]
visible = false
layout_mode = 2
metadata/_tab_index = 1

[node name="TagEditor" parent="Root/VBoxContainer/Body/HSplitContainer/Images/CenterMenu/Tags" instance=ExtResource("7_q8u5g")]
layout_mode = 2

[node name="ColorPickerPopup" parent="Root/VBoxContainer/Body/HSplitContainer/Images/CenterMenu/Tags/TagEditor" instance=ExtResource("14_3p2gp")]
unique_name_in_owner = true
visible = false

[node name="Popups" type="Node" parent="."]

[node name="ConfirmationPopup" parent="Popups" instance=ExtResource("14_mwfav")]
visible = false
ok_button_text = "Delete"

[node name="ErrorDialog" type="AcceptDialog" parent="Popups"]
title = "File already exists"
initial_position = 2
size = Vector2i(255, 100)
popup_window = true
dialog_text = "A file with this name already exists."

[node name="ConversionPopup" parent="Popups" instance=ExtResource("16_cvmbd")]
visible = false

[node name="CreateFolderDialog" parent="Popups" instance=ExtResource("17_ft6cd")]

[node name="AppController" type="Node" parent="." node_paths=PackedStringArray("tool_controller", "search_controller", "file_browser", "directory_controller", "tag_overview_controller", "image_view_controller")]
script = ExtResource("13_1nqs0")
tool_controller = NodePath("ToolController")
search_controller = NodePath("SearchController")
file_browser = NodePath("FileBrowserController")
directory_controller = NodePath("DirectoryController")
tag_overview_controller = NodePath("TagOverviewController")
image_view_controller = NodePath("TaggingViewController")

[node name="ToolController" type="Node" parent="AppController" node_paths=PackedStringArray("conversion_popup", "menu_button", "directory_controller", "file_controller")]
script = ExtResource("1_3p2gp")
conversion_popup = NodePath("../../Popups/ConversionPopup")
menu_button = NodePath("../../Root/VBoxContainer/Header/MarginContainer/Toolbar/ToolsMenuButton")
directory_controller = NodePath("../DirectoryController")
file_controller = NodePath("../FileBrowserController")
metadata/_custom_type_script = "uid://b4t3o4eogrh3n"

[node name="SearchController" type="Node" parent="AppController" node_paths=PackedStringArray("search_panel")]
script = ExtResource("8_jlsqs")
search_panel = NodePath("../../Root/VBoxContainer/Body/HSplitContainer/LeftMenu/Folders/VBoxContainer/SearchPanel")
metadata/_custom_type_script = "uid://bjvppx536xcr3"

[node name="DirectoryController" type="Node" parent="AppController" node_paths=PackedStringArray("directory_view")]
script = ExtResource("16_1nqs0")
directory_view = NodePath("../../Root/VBoxContainer/Body/HSplitContainer/LeftMenu/Folders/VBoxContainer/DirectoryView")

[node name="FileBrowserController" type="Node" parent="AppController" node_paths=PackedStringArray("image_view")]
script = SubResource("GDScript_1nqs0")
image_view = NodePath("../../Root/VBoxContainer/Body/HSplitContainer/Images/CenterMenu/Images/HSplitContainer/FileBrowser")

[node name="TaggingViewController" type="Node" parent="AppController" node_paths=PackedStringArray("image_view", "_error_dialog", "file_menu_controller")]
script = ExtResource("4_wp0k4")
image_view = NodePath("../../Root/VBoxContainer/Body/HSplitContainer/Images/CenterMenu/Images/HSplitContainer/VBoxContainer2/Single")
_error_dialog = NodePath("../../Popups/ErrorDialog")
file_menu_controller = NodePath("../FileBrowserController")

[node name="TagOverviewController" type="Node" parent="AppController" node_paths=PackedStringArray("view", "color_picker")]
script = ExtResource("5_bjd11")
view = NodePath("../../Root/VBoxContainer/Body/HSplitContainer/Images/CenterMenu/Tags/TagEditor")
color_picker = NodePath("../../Root/VBoxContainer/Body/HSplitContainer/Images/CenterMenu/Tags/TagEditor/ColorPickerPopup")
metadata/_custom_type_script = "uid://b37wppbdqh0qm"

[node name="BulkTaggingController" type="Node" parent="AppController" node_paths=PackedStringArray("browser_controller", "tagging_view")]
script = ExtResource("7_nfivy")
browser_controller = NodePath("../FileBrowserController")
tagging_view = NodePath("../../Root/VBoxContainer/Body/HSplitContainer/Images/CenterMenu/Images/HSplitContainer/VBoxContainer2/Selection")
metadata/_custom_type_script = "uid://8bv6r2etb1ah"

[node name="TaggingQueue" type="Node" parent="AppController/BulkTaggingController"]
script = ExtResource("24_2ofn6")
metadata/_custom_type_script = "uid://qn1hye8vtl5x"

[connection signal="path_selected" from="AppController/DirectoryController" to="AppController/FileBrowserController" method="set_directory" flags=3]
[connection signal="selection_changed" from="AppController/FileBrowserController" to="AppController/TaggingViewController" method="_on_file_menu_controller_selection_changed"]
